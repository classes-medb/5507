NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3    
4    * lecture02.sas
5      written by Steve Simon
6      October 22, 2018;
7    
8    ********* ********* ********* *********
9    1. Output and data locations
10   
11   This is the first few lines of SAS
12   code, showing where to store the
13   output, where to find the input and
14   where to store the SAS binary data set
15   the program creates.
16   ********* ********* ********* *********;
17   
18   ods pdf
19     file="lecture02.pdf";
NOTE: Writing ODS PDF output to DISK destination 
      "C:\Users\simons\Documents\SASUniversityEdition\myfolders\introduction-to-sas\part2\src\lecture02.pdf", printer "PDF".
20   
21   filename raw_data
22     "../data/titanic_v00.txt";
23   
24   libname intro
25     "../data";
NOTE: Libref INTRO was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: C:\Users\simons\Documents\SASUniversityEdition\myfolders\introduction-to-sas\part2\data
26   
27   ********* ********* ********* *********
28   2. Reading, proc import
29   
30   As a general rule, proc import works
31   best for simple delimited files where
32   the first row contains the variable
33   names. With complicated text files
34   (such as files where the data for an
35   individual extends across more than one
36   line) or files without variable names
37   in the first row are usually better
38   handled by a data step.
39   ********* ********* ********* *********;
40   
41   proc import
42       datafile=raw_data
43       out=intro.titanic
44       dbms=dlm
45       replace;
46     delimiter='09'x;
47     getnames=yes;
48   run;

49    /**********************************************************************
50    *   PRODUCT:   SAS
51    *   VERSION:   9.4
52    *   CREATOR:   External File Interface
53    *   DATE:      08JUL19
54    *   DESC:      Generated SAS Datastep Code
55    *   TEMPLATE SOURCE:  (None Specified.)
56    ***********************************************************************/
57       data INTRO.TITANIC    ;
58       %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
59       infile RAW_DATA delimiter='09'x MISSOVER DSD lrecl=32767 firstobs=2 ;
60          informat Name $50. ;
61          informat PClass $3. ;
62          informat Age $4. ;
63          informat Sex $6. ;
64          informat Survived best32. ;
65          format Name $50. ;
66          format PClass $3. ;
67          format Age $4. ;
68          format Sex $6. ;
69          format Survived best12. ;
70       input
71                   Name $
72                   PClass $
73                   Age $
74                   Sex $
75                   Survived
76       ;
77       if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
78       run;

NOTE: The infile RAW_DATA is:
      Filename=C:\Users\simons\Documents\SASUniversityEdition\myfolders\introduction-to-sas\part2\data\titanic_v00.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=55694,
      Last Modified=05Jun2019:14:27:37,
      Create Time=05Jun2019:14:27:37

NOTE: 1313 records were read from the infile RAW_DATA.
      The minimum record length was 27.
      The maximum record length was 80.
NOTE: The data set INTRO.TITANIC has 1313 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

1313 rows created in INTRO.TITANIC from RAW_DATA.
  
  
  
NOTE: INTRO.TITANIC data set was successfully created.
NOTE: The data set INTRO.TITANIC has 1313 observations and 5 variables.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.07 seconds
      

79   
80   ********* ********* ********* *********
81   3. First ten lines, proc print
82   
83   If you look at the first few rows of
84   data, you will see that the import went
85   reasonably well. It is not always this
86   easy. Do take notice that age is left
87   justified. It is caused by a number of
88   "NA" codes for missing values. You
89   don't see it here, but if you print a
90   few more observations, you can see the
91   "NA" values. It would have been easier
92   to anticipate these ahead of time, but
93   We'll fix things up after the fact.
94   ********* ********* ********* *********;
95   
96   proc print
NOTE: Writing HTML Body file: sashtml.htm
97       data=intro.titanic(obs=10);
98     title1 " ";
99   run;

NOTE: There were 10 observations read from the data set INTRO.TITANIC.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.25 seconds
      cpu time            0.21 seconds
      

100  
101  ********* ********* ********* *********
102  4. Counts, proc freq
103  
104  For any categorical variables, your
105  first step is to get frequency counts.
106  ********* ********* ********* *********;
107  
108  proc freq
109      data=intro.titanic;
110    tables PClass Sex Survived;
111  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

112  
113  ********* ********* ********* *********
114  5. Convert string to numeric, data step
115  
116  For the one continuous variable (age)
117  you need to convert the code "NA" to
118  the SAS missing value code, which is a
119  dot. The easiest way to do this is to
120  force the data to numeric with a simple
121  arithmetic equation like adding a zero.
122  But you get a warning message for each
123  occurence of NA, which can get tedious.
124  The input function with two question
125  marks avoids this issue.
126  ********* ********* ********* *********;
127  
128  data intro.titanic;
129    set intro.titanic;
130    age_c = input(age, ?? 8.);
131  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: The data set INTRO.TITANIC has 1313 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

132  
133  proc means
134      n nmiss mean std min max
135      data=intro.titanic;
136    var age_c;
137  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

138  
139  ********* ********* ********* *********
140  6. Using proc format to code categorical data
141  
142  For variables like Survived which are
143  numbers, but the numbers represent a
144  particular category, you can document
145  this using a format statement.
146  ********* ********* ********* *********;
147  
148  proc format;
149    value f_survived
150      0 = "No"
151      1 = "Yes";
NOTE: Format F_SURVIVED has been output.
152  run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

153  
154  proc freq
155      data=intro.titanic;
156    tables Survived;
157    format Survived f_survived.;
158  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

159  
160  ********* ********* ********* *********
161  7. Bar charts, proc sgplot
162  
163  I don't normally like bar charts, but
164  they do have their uses.
165  ********* ********* ********* *********;
166  
167  proc sgplot
168      data=intro.titanic;
169    vbar Survived;
170    format Survived f_survived.;
171  run;

NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           0.94 seconds
      cpu time            0.18 seconds
      
NOTE: There were 1313 observations read from the data set INTRO.TITANIC.

172  
173  ********* ********* ********* *********
174  8. Percentages for bar chart
175  
176  Getting percentages is a bit tricky. You
177  have to run proc freq and output the
178  results to a new data file, pct_survived.
179  I am using the noprint option, because
180  I only want the percentages for internal
181  use. It wouldn't have hurt anything to
182  print out a bit extra, but I want to
183  encourage you to limit the amount of
184  output that you present to a consulting
185  client.
186  
187  Note the yaxis maxx=100 statement which
188  expands the upper limit of the y axis
189  to 100%.
190  ********* ********* ********* *********;
191  
192  proc freq
193      data=intro.titanic;
194    tables Survived / noprint out=pct_survived;
195  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: The data set WORK.PCT_SURVIVED has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

196  
197  proc print
198      data=pct_survived;
199    format Survived f_survived.;
200  run;

NOTE: There were 2 observations read from the data set WORK.PCT_SURVIVED.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

201  
202  proc sgplot
203      data=pct_survived;
204    vbar Survived / response=Percent;
205    yaxis max=100;
206    format Survived f_survived.;
207  run;

NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           0.49 seconds
      cpu time            0.09 seconds
      
NOTE: There were 2 observations read from the data set WORK.PCT_SURVIVED.

208  
209  ********* ********* ********* *********
210  9. Crosstabulation
211  
212  To examine relationships among
213  categorical variables use a two
214  dimensional crosstabulation.
215  ********* ********* ********* *********;
216  
217  proc freq
218      data=intro.titanic;
219    tables Sex*Survived / nocol nopercent;
220    format Survived f_survived.;
221  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      

222  
223  ********* ********* ********* *********
224  10. Converting a continuous variable to categorical
225  
226  If you want to create categories from a
227  continuous variable, use a series of
228  
229    if - then - else
230  
231  statements
232  ********* ********* ********* *********;
233  
234  data age_categories;
235    set intro.titanic;
236    if age_c = .
237      then age_cat = "missing ";
238    else if age_c < 6
239      then age_cat = "toddler ";
240    else if age_c < 13
241      then age_cat = "pre-teen";
242    else if age_c < 21
243      then age_cat = "teenager";
244    else age_cat   = "adult   ";
245  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: The data set WORK.AGE_CATEGORIES has 1313 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

246  
247  ********* ********* ********* *********
248  11. Quality check
249  
250  Always cross check your results against
251  the original variable.
252  ********* ********* ********* *********;
253  
254  proc sort
255      data=age_categories;
256    by age_cat;
257  run;

NOTE: There were 1313 observations read from the data set WORK.AGE_CATEGORIES.
NOTE: The data set WORK.AGE_CATEGORIES has 1313 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

258  
259  proc means
260      min max
261      data=age_categories;
262    by age_cat;
263    var age_c;
264  run;

NOTE: There were 1313 observations read from the data set WORK.AGE_CATEGORIES.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

265  
266  ********* ********* ********* *********
267  12. Controlling the display order
268  
269  Notice that the order for age_cat is
270  alphabetical, which is probably not
271  what you want. You can control the
272  order by using number codes and
273  formats.
274  ********* ********* ********* *********;
275  
276  data age_codes;
277    set intro.titanic;
278    if age_c = .
279      then age_cat = 9;
280    else if age_c < 6
281      then age_cat = 1;
282    else if age_c < 13
283      then age_cat = 2;
284    else if age_c < 21
285      then age_cat = 3;
286    else age_cat = 4;
287  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: The data set WORK.AGE_CODES has 1313 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

288  
289  ********* ********* ********* *********
290  13. With number codes, use proc format
291  
292  Once  you have the number codes, assign
293  an interpretable label using proc
294  format.
295  ********* ********* ********* *********;
296  
297  proc format;
298    value f_age
299      1 = "toddler"
300      2 = "pre-teen"
301      3 = "teenager"
302      4 = "adult"
303      9 = "unknown";
NOTE: Format F_AGE has been output.
304  run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

305  
306  ********* ********* ********* *********
307  14. With number codes, use proc format
308  
309  Here's the quality check again.
310  ********* ********* ********* *********;
311  
312  proc sort
313      data=age_codes;
314    by age_cat;
315  run;

NOTE: There were 1313 observations read from the data set WORK.AGE_CODES.
NOTE: The data set WORK.AGE_CODES has 1313 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

316  
317  proc means
318      min max
319      data=age_codes;
320    by age_cat;
321    var age_c;
322    format age_cat f_age.;
323  run;

NOTE: There were 1313 observations read from the data set WORK.AGE_CODES.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

324  
325  ********* ********* ********* *********
326  15. Modifying a categorical variable
327  
328  Here's another example where you
329  compare First Class passengers to
330  Second and Third class passengers
331  combined.
332  ********* ********* ********* *********;
333  
334  data first_class;
335    set intro.titanic;
336    if PClass = "1st"
337      then first_class = "Yes";
338      else first_class = "No";
339  run;

NOTE: There were 1313 observations read from the data set INTRO.TITANIC.
NOTE: The data set WORK.FIRST_CLASS has 1313 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

340  
341  proc freq
342      data=first_class;
343    table PClass*first_class /
344      norow nocol nopercent;
345  run;

NOTE: There were 1313 observations read from the data set WORK.FIRST_CLASS.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

346  
347  ********* ********* ********* *********
348  The Gardasil vaccine requires three
349  shots in order to be effective. A study
350  conducted at Johns Hopkins looked at
351  how often patients failed to get all
352  three shots. They wanted to see if
353  insurance status, age, and other
354  factors could predict who was at
355  greatest risk for failing to get all
356  three shots.
357  
358  The data set is available as an Excel
359  spreadsheet at
360  
361    http://www.amstat.org/publications/jse/v19n1/gardasil.xls
362  
363  and a description of the file is available at
364  
365    http://www.amstat.org/publications/jse/v19n1/gardasil.txt
366  
367    1. Create factors for AgeGroup, Race,
368    Completed, Location.
369  
370    2. Report which variables have missing data and
371    how many of these values are missing.
372  
373    3. What proportion of patients completed all
374    three shots?
375  
376    4. Draw a bar chart showing the percentage of
377    patients at each of the four locations.
378  
379    5. Use a crosstabulation to compare Age to
380    AgeGroup, and Location to LocationType. Are
381    the recodings into AgeGroup and LocationType
382    done properly?
383  
384    6. Create a new variable that combines the race
385    categories into white, and non-white. Calculate
386    the proportion of white patients at each of the
387    four locations.
388  ;
389  ********* ********* ********* *********;
390  
391  ods pdf close;
NOTE: ODS PDF printed 16 pages to 
      C:\Users\simons\Documents\SASUniversityEdition\myfolders\introduction-to-sas\part2\src\lecture02.pdf.
392  
393  ********* ********* ********* *********;
394  proc printto; run;

